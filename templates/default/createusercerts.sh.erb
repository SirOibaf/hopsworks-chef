#!/bin/bash

# Copyright (C) 2014 - 2018 Logical Clocks AB. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ $# -ne 7  ]; then
 echo "Usage: $0 service countryCode city organization_name email_address orcid "
 exit 1
fi

set -e

#Variables
DOMAIN="$1"
COUNTRY_CODE="$2"
CITY="$3"
ORG="$4"
EMAIL="$5"
ORCID="$6"
KEYSTOREPW="$7"


# default password should be 'adminpw'
MASTERPW=<%= node['hopsworks']['master']['password'] %>
cd <%= @int_ca_dir %>

#1 Create a user key
openssl genrsa \
      -out private/${DOMAIN}.key.pem 2048

chmod 400 private/${DOMAIN}.key.pem

#2 Create a user certificate
#	-subj "/C=${COUNTRY_CODE}/ST=${CITY}/L=${ORCID}/O=${ORG}/CN=${DOMAIN}/emailAddress=${EMAIL}" \
openssl req -config ../openssl-ca.cnf \
       -subj "/C=${COUNTRY_CODE}/ST=${CITY}/L=${ORCID}/O=${ORG}/CN=${DOMAIN}" \
       -passin pass:$KEYSTOREPW -passout pass:$KEYSTOREPW \
       -key private/${DOMAIN}.key.pem \
       -new -sha256 -out csr/${DOMAIN}.csr.pem

openssl ca -batch -config openssl-intermediate.cnf \
      -passin pass:$MASTERPW \
      -extensions usr_cert -days 365 -notext -md sha256 \
      -in csr/${DOMAIN}.csr.pem \
      -out certs/${DOMAIN}.cert.pem

chmod 444 certs/${DOMAIN}.cert.pem

#3 Verify the intermediate certificate
## openssl verify -CAfile certs/ca-chain.cert.pem certs/${DOMAIN}.cert.pem

#Create new Keystore
openssl pkcs12 -export -in certs/${DOMAIN}.cert.pem -inkey private/${DOMAIN}.key.pem -out cert_and_key.p12 -name $DOMAIN -CAfile certs/intermediate.cert.pem -caname root -password pass:$KEYSTOREPW
keytool -importkeystore -destkeystore ${DOMAIN}__kstore.jks -srckeystore cert_and_key.p12 -srcstoretype PKCS12 -alias $DOMAIN -srcstorepass $KEYSTOREPW -deststorepass $KEYSTOREPW -destkeypass $KEYSTOREPW
keytool -import -noprompt -trustcacerts -alias CARoot -file certs/intermediate.cert.pem -keystore ${DOMAIN}__kstore.jks -srcstorepass $KEYSTOREPW -deststorepass $KEYSTOREPW -destkeypass $KEYSTOREPW
keytool -import -noprompt -trustcacerts -alias CARoot -file certs/intermediate.cert.pem -keystore ${DOMAIN}__tstore.jks -srcstorepass $KEYSTOREPW -deststorepass $KEYSTOREPW -destkeypass $KEYSTOREPW

chown -R <%= node['glassfish']['user'] %>:<%= node['glassfish']['group'] %> ${DOMAIN}__kstore.jks ${DOMAIN}__tstore.jks
mv  ${DOMAIN}__kstore.jks /tmp/${DOMAIN}__kstore.jks
mv  ${DOMAIN}__tstore.jks /tmp/${DOMAIN}__tstore.jks
rm cert_and_key.p12
